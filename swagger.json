{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kiali project, observability for the Istio service mesh",
    "title": "Kiali",
    "version": "_"
  },
  "basePath": "/api",
  "paths": {
    "/": {
      "get": {
        "description": "Endpoint to get the status of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "kiali"
        ],
        "operationId": "root",
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/auth/info": {
      "get": {
        "description": "Endpoint to get login info, such as strategy, authorization endpoints\nfor OAuth providers and so on.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "authenticationInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/authenticationInfo"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/auth/openid_redirect": {
      "get": {
        "description": "Endpoint to redirect the browser of the user to the authentication\nendpoint of the configured OpenId provider.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/html"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "openidRedirect",
        "responses": {
          "200": {
            "$ref": "#/responses/noContent"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/authenticate": {
      "get": {
        "security": [
          {
            "authorization": [
              "user",
              "password"
            ]
          }
        ],
        "description": "Endpoint to authenticate the user",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "authenticate",
        "responses": {
          "200": {
            "$ref": "#/responses/tokenResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "post": {
        "description": "Endpoint to check if a token from Openshift is working correctly",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "openshiftCheckToken",
        "responses": {
          "200": {
            "$ref": "#/responses/tokenResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/config": {
      "get": {
        "description": "Endpoint to get the config of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "kiali"
        ],
        "operationId": "getConfig",
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/grafana": {
      "get": {
        "description": "Get the grafana URL and other descriptors",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "integrations"
        ],
        "operationId": "grafanaInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/grafanaInfoResponse"
          },
          "204": {
            "$ref": "#/responses/noContent"
          },
          "500": {
            "$ref": "#/responses/internalError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Endpoint to get the health of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "kiali"
        ],
        "operationId": "healthz",
        "responses": {
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/istio/permissions": {
      "get": {
        "description": "Endpoint to get the caller permissions on new Istio Config objects",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "getPermissions",
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigPermissions"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/istio/status": {
      "get": {
        "description": "Get the status of each components needed in the control plane",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "status"
        ],
        "operationId": "istioStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/istioStatusResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/iter8/experiments": {
      "get": {
        "description": "User can define a comman separated list of namespaces.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "iter8"
        ],
        "summary": "Endpoint to fetch iter8 experiments for all namespaces user have access.",
        "operationId": "iter8Experiments",
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentsResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/iter8/experiments/namespaces/{namespace}/name/{name}": {
      "delete": {
        "description": "Endpoint to delete   iter8 experiments",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "iter8"
        ],
        "operationId": "deleteIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name param",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8StatusResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/iter8/experiments/{namespace}/name/{name}": {
      "patch": {
        "description": "Endpoint to update new iter8 experiment (for abort purpose)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "iter8"
        ],
        "operationId": "patchIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name param",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentGetDetailResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/iter8/namespaces/{namespace}/experiments": {
      "post": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "iter8"
        ],
        "summary": "Endpoint to create new iter8 experiments for a given namespace.",
        "operationId": "postIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentGetDetailResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/iter8/namespaces/{namespace}/experiments/{name}": {
      "get": {
        "description": "Endpoint to fetch iter8 experiments by namespace and name",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "iter8"
        ],
        "operationId": "getIter8Experiments",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The name param",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/iter8ExperimentGetDetailResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/jaeger": {
      "get": {
        "description": "Get the jaeger URL and other descriptors",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "integrations"
        ],
        "operationId": "jaegerInfo",
        "responses": {
          "200": {
            "$ref": "#/responses/jaegerInfoResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "406": {
            "$ref": "#/responses/notAcceptableError"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "Endpoint to logout an user (unset the session cookie)",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "auth"
        ],
        "operationId": "logout",
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/mesh/tls": {
      "get": {
        "description": "Get TLS status for the whole mesh",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "tls"
        ],
        "operationId": "meshTls",
        "responses": {
          "200": {
            "$ref": "#/responses/meshTlsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces": {
      "get": {
        "description": "Endpoint to get the list of the available namespaces",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceList",
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceList"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a namespaces graph.",
        "operationId": "graphNamespaces",
        "parameters": [
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [aggregateNode, deadNode, healthConfig, idleNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, throughput].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "Comma-separated list of desired node boxing. Available boxings: [app, cluster, namespace, none].",
            "name": "boxBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including edges that have no request traffic for the time period.",
            "name": "includeIdleEdges",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Comma-separated list of namespaces to include in the graph. The namespaces must be accessible to the client.",
            "name": "namespaces",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate gRPC traffic rate. One of: none | received (i.e. response_messages) | requests | sent (i.e. request_messages) | total (i.e. sent+received).",
            "name": "rateGrpc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate HTTP traffic rate. One of: none | requests.",
            "name": "rateHttp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "sent",
            "x-go-name": "Name",
            "description": "How to calculate TCP traffic rate. One of: none | received (i.e. received_bytes) | sent (i.e. sent_bytes) | total (i.e. sent+received).",
            "name": "rateTcp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "95",
            "x-go-name": "Name",
            "description": "Used only with responseTime appender. One of: avg | 50 | 95 | 99.",
            "name": "responseTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "request",
            "x-go-name": "Name",
            "description": "Used only with throughput appender. One of: request | response.",
            "name": "throughput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "summary": "Endpoint to update the Namespace configuration using Json Merge Patch strategy.",
        "operationId": "namespaceUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/aggregates/{aggregate}/{aggregateValue}/graph": {
      "get": {
        "description": "The backing JSON for an aggregate node detail graph. (supported graphTypes: app | versionedApp | workload)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "operationId": "graphAggregate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The aggregate name (label).",
            "name": "aggregate",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The aggregate value (label value).",
            "name": "aggregateValue",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The cluster name. If not supplied queries/results will not be constrained by cluster.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/aggregates/{aggregate}/{aggregateValue}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single aggregate",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "aggregates"
        ],
        "operationId": "aggregateMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The aggregate name (label).",
            "name": "aggregate",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The aggregate value (label value).",
            "name": "aggregateValue",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/aggregates/{aggregate}/{aggregateValue}/{service}/graph": {
      "get": {
        "description": "The backing JSON for an aggregate node detail graph, specific to a service. (supported graphTypes: app | versionedApp | workload)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "operationId": "graphAggregateByService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The aggregate name (label).",
            "name": "aggregate",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The aggregate value (label value).",
            "name": "aggregateValue",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The cluster name. If not supplied queries/results will not be constrained by cluster.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/applications/{app}/graph": {
      "get": {
        "description": "The backing JSON for an app node detail graph. (supported graphTypes: app | versionedApp)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "operationId": "graphApp",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The cluster name. If not supplied queries/results will not be constrained by cluster.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [aggregateNode, deadNode, healthConfig, idleNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, throughput].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "Comma-separated list of desired node boxing. Available boxings: [app, cluster, namespace, none].",
            "name": "boxBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including edges that have no request traffic for the time period.",
            "name": "includeIdleEdges",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate gRPC traffic rate. One of: none | received (i.e. response_messages) | requests | sent (i.e. request_messages) | total (i.e. sent+received).",
            "name": "rateGrpc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate HTTP traffic rate. One of: none | requests.",
            "name": "rateHttp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "sent",
            "x-go-name": "Name",
            "description": "How to calculate TCP traffic rate. One of: none | received (i.e. received_bytes) | sent (i.e. sent_bytes) | total (i.e. sent+received).",
            "name": "rateTcp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "95",
            "x-go-name": "Name",
            "description": "Used only with responseTime appender. One of: avg | 50 | 95 | 99.",
            "name": "responseTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "request",
            "x-go-name": "Name",
            "description": "Used only with throughput appender. One of: request | response.",
            "name": "throughput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/applications/{app}/versions/{version}/graph": {
      "get": {
        "description": "The backing JSON for a versioned app node detail graph. (supported graphTypes: app | versionedApp)",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "operationId": "graphAppVersion",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app version (label value).",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The cluster name. If not supplied queries/results will not be constrained by cluster.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [aggregateNode, deadNode, healthConfig, idleNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, throughput].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "Comma-separated list of desired node boxing. Available boxings: [app, cluster, namespace, none].",
            "name": "boxBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including edges that have no request traffic for the time period.",
            "name": "includeIdleEdges",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate gRPC traffic rate. One of: none | received (i.e. response_messages) | requests | sent (i.e. request_messages) | total (i.e. sent+received).",
            "name": "rateGrpc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate HTTP traffic rate. One of: none | requests.",
            "name": "rateHttp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "sent",
            "x-go-name": "Name",
            "description": "How to calculate TCP traffic rate. One of: none | received (i.e. received_bytes) | sent (i.e. sent_bytes) | total (i.e. sent+received).",
            "name": "rateTcp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "95",
            "x-go-name": "Name",
            "description": "Used only with responseTime appender. One of: avg | 50 | 95 | 99.",
            "name": "responseTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "request",
            "x-go-name": "Name",
            "description": "Used only with throughput appender. One of: request | response.",
            "name": "throughput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps": {
      "get": {
        "description": "Endpoint to get the list of apps for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appListResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}": {
      "get": {
        "description": "Endpoint to get the app details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appDetails"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}/dashboard": {
      "get": {
        "description": "Endpoint to fetch dashboard to be displayed, related to a single app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}/errortraces": {
      "get": {
        "description": "Endpoint to get the number of traces in error for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "errorTraces",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/errorTracesResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}/health": {
      "get": {
        "description": "Get health associated to the given app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "App",
            "description": "The target app",
            "name": "app",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/appHealthResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "appMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}/spans": {
      "get": {
        "description": "Endpoint to get Jaeger spans for a given app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "appSpans",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/spansResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/apps/{app}/traces": {
      "get": {
        "description": "Endpoint to get the traces of a given app",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "appTraces",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The app name (label value).",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/traceDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/customdashboard/{dashboard}": {
      "get": {
        "description": "Endpoint to fetch a custom dashboard",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "dashboards"
        ],
        "operationId": "customDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The dashboard resource name.",
            "name": "dashboard",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "In custom dashboards, additional labels that are made available for grouping in the UI, regardless which aggregations are defined in the MonitoringDashboard CR",
            "name": "additionalLabels",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "In custom dashboards, labels filters to use when fetching metrics, formatted as key:value pairs. Ex: \"app:foo,version:bar\".",
            "name": "labelsFilters",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/health": {
      "get": {
        "description": "Get health for all objects in the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "pattern": "^(app|service|workload)$",
            "type": "string",
            "default": "app",
            "x-go-name": "Type",
            "description": "The type of health, \"app\", \"service\" or \"workload\".",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceAppHealthResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio": {
      "get": {
        "description": "Endpoint to get the list of Istio Config of a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "istioConfigList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigList"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio/{object_type}": {
      "post": {
        "description": "Endpoint to create an Istio object by using an Istio Config item",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "istioConfigCreate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "201": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/istio/{object_type}/{object}": {
      "get": {
        "description": "Endpoint to get the Istio Config of an Istio object",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "istioConfigDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "delete": {
        "description": "Endpoint to delete the Istio Config of an (arbitrary) Istio object",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "operationId": "istioConfigDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "config"
        ],
        "summary": "Endpoint to update the Istio Config of an Istio object used for templates and adapters using Json Merge Patch strategy.",
        "operationId": "istioConfigUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object name.",
            "name": "object",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^(gateways|virtualservices|destinationrules|serviceentries|rules|quotaspecs|quotaspecbindings)$",
            "type": "string",
            "x-go-name": "Name",
            "description": "The Istio object type.",
            "name": "object_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/istioConfigDetailsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/pods/{pod}": {
      "get": {
        "description": "Endpoint to get pod details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pods"
        ],
        "operationId": "podDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/pods/{pod}/config_dump": {
      "get": {
        "description": "Endpoint to get pod proxy dump",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pods"
        ],
        "operationId": "podProxyDump",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/configDump"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/pods/{pod}/config_dump/{resource}": {
      "get": {
        "description": "Endpoint to get pod logs",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pods"
        ],
        "operationId": "podProxyResource",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The discovery service resource",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/configDumpResource"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/pods/{pod}/logs": {
      "get": {
        "description": "Endpoint to get pod logs",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "pods"
        ],
        "operationId": "podLogs",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod container name. Optional for single-container pod. Otherwise required.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The start time for fetching logs. UNIX time in seconds. Default is all logs.",
            "name": "sinceTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration). Duration starts on\n`sinceTime` if set, or the time for the first log message if not set.",
            "name": "duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services": {
      "get": {
        "description": "Endpoint to get the details of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceListResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}": {
      "get": {
        "description": "Endpoint to get the details of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "summary": "Endpoint to update the Service configuration using Json Merge Patch strategy.",
        "operationId": "serviceUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceDetailsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/dashboard": {
      "get": {
        "description": "Endpoint to fetch dashboard to be displayed, related to a single service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a service node detail graph.",
        "operationId": "graphService",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The cluster name. If not supplied queries/results will not be constrained by cluster.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [aggregateNode, deadNode, healthConfig, idleNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, throughput].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "Comma-separated list of desired node boxing. Available boxings: [app, cluster, namespace, none].",
            "name": "boxBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate gRPC traffic rate. One of: none | received (i.e. response_messages) | requests | sent (i.e. request_messages) | total (i.e. sent+received).",
            "name": "rateGrpc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate HTTP traffic rate. One of: none | requests.",
            "name": "rateHttp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "sent",
            "x-go-name": "Name",
            "description": "How to calculate TCP traffic rate. One of: none | received (i.e. received_bytes) | sent (i.e. sent_bytes) | total (i.e. sent+received).",
            "name": "rateTcp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "95",
            "x-go-name": "Name",
            "description": "Used only with responseTime appender. One of: avg | 50 | 95 | 99.",
            "name": "responseTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "request",
            "x-go-name": "Name",
            "description": "Used only with throughput appender. One of: request | response.",
            "name": "throughput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/health": {
      "get": {
        "description": "Get health associated to the given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Service",
            "description": "The target service",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/serviceHealthResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "operationId": "serviceMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/spans": {
      "get": {
        "description": "Endpoint to get Jaeger spans for a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "serviceSpans",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/spansResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/services/{service}/traces": {
      "get": {
        "description": "Endpoint to get the traces of a given service",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "serviceTraces",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The service name.",
            "name": "service",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/traceDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/tls": {
      "get": {
        "description": "Get TLS status for the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "tls"
        ],
        "operationId": "namespaceTls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceTlsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/validations": {
      "get": {
        "description": "Get validation summary for all objects in the given namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "namespaces"
        ],
        "operationId": "namespaceValidations",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/namespaceValidationSummaryResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads": {
      "get": {
        "description": "Endpoint to get the list of workloads for a namespace",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadList",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadListResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}": {
      "get": {
        "description": "Endpoint to get the workload details",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "summary": "Endpoint to update the Workload configuration using Json Merge Patch strategy.",
        "operationId": "workloadUpdate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadDetails"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/dashboard": {
      "get": {
        "description": "Endpoint to fetch dashboard to be displayed, related to a single workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadDashboard",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "graphs"
        ],
        "summary": "The backing JSON for a workload node detail graph.",
        "operationId": "graphWorkload",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The cluster name. If not supplied queries/results will not be constrained by cluster.",
            "name": "container",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "run all appenders",
            "x-go-name": "Name",
            "description": "Comma-separated list of Appenders to run. Available appenders: [aggregateNode, deadNode, healthConfig, idleNode, istio, responseTime, securityPolicy, serviceEntry, sidecarsCheck, throughput].",
            "name": "appenders",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "x-go-name": "Name",
            "description": "Comma-separated list of desired node boxing. Available boxings: [app, cluster, namespace, none].",
            "name": "boxBy",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "Name",
            "description": "Query time-range duration (Golang string duration).",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "x-go-name": "Name",
            "description": "Graph type. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for including edges that have no request traffic for the time period.",
            "name": "includeIdleEdges",
            "in": "query"
          },
          {
            "type": "string",
            "default": "false",
            "x-go-name": "Name",
            "description": "Flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          },
          {
            "type": "string",
            "default": "now",
            "x-go-name": "Name",
            "description": "Unix time (seconds) for query such that time range is [queryTime-duration..queryTime]. Default is now.",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate gRPC traffic rate. One of: none | received (i.e. response_messages) | requests | sent (i.e. request_messages) | total (i.e. sent+received).",
            "name": "rateGrpc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "requests",
            "x-go-name": "Name",
            "description": "How to calculate HTTP traffic rate. One of: none | requests.",
            "name": "rateHttp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "sent",
            "x-go-name": "Name",
            "description": "How to calculate TCP traffic rate. One of: none | received (i.e. received_bytes) | sent (i.e. sent_bytes) | total (i.e. sent+received).",
            "name": "rateTcp",
            "in": "query"
          },
          {
            "type": "string",
            "default": "95",
            "x-go-name": "Name",
            "description": "Used only with responseTime appender. One of: avg | 50 | 95 | 99.",
            "name": "responseTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": "request",
            "x-go-name": "Name",
            "description": "Used only with throughput appender. One of: request | response.",
            "name": "throughput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/graphResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/health": {
      "get": {
        "description": "Get health associated to the given workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadHealth",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Namespace",
            "description": "The namespace scope",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "x-go-name": "RateInterval",
            "description": "The rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The time to use for the prometheus query",
            "name": "QueryTime",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Workload",
            "description": "The target workload",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "WorkloadType",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/workloadHealthResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/metrics": {
      "get": {
        "description": "Endpoint to fetch metrics to be displayed, related to a single workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "workloads"
        ],
        "operationId": "workloadMetrics",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-go-name": "Name",
            "description": "Flag for fetching histogram average. Default is true.",
            "name": "avg",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of labels to use for grouping metrics (via Prometheus 'by' clause).",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "x-go-name": "Name",
            "description": "Traffic direction: 'inbound' or 'outbound'.",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1800,
            "x-go-name": "Name",
            "description": "Duration of the query period, in seconds.",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of metrics to fetch. Fetch all metrics when empty. List entries are Kiali internal metric names.",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-go-name": "Name",
            "description": "List of quantiles to fetch. Fetch no quantiles when empty. Ex: [0.5, 0.95, 0.99].",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "rate",
            "x-go-name": "Name",
            "description": "Prometheus function used to calculate rate: 'rate' or 'irate'.",
            "name": "rateFunc",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "x-go-name": "Name",
            "description": "Interval used for rate and histogram calculation.",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "x-go-name": "Name",
            "description": "Desired request protocol for the telemetry: For example, 'http' or 'grpc'.",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "x-go-name": "Name",
            "description": "Istio telemetry reporter: 'source' or 'destination'.",
            "name": "reporter",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 15,
            "x-go-name": "Name",
            "description": "Step between [graph] datapoints, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "Filters metrics by the specified version.",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/spans": {
      "get": {
        "description": "Endpoint to get Jaeger spans for a given workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "workloadSpans",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/spansResponse"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/namespaces/{namespace}/workloads/{workload}/traces": {
      "get": {
        "description": "Endpoint to get the traces of a given workload",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "workloadTraces",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The namespace name.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/traceDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/stats/metrics": {
      "post": {
        "description": "Produces metrics statistics",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "stats"
        ],
        "operationId": "metricsStats",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MetricsStatsQueries"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/metricsStatsResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Endpoint to get the status of Kiali",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "status"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "$ref": "#/responses/statusInfo"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    },
    "/traces/{traceID}": {
      "get": {
        "description": "Endpoint to get a specific trace from ID",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "traces"
        ],
        "operationId": "traceDetails",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Name",
            "description": "The trace ID.",
            "name": "traceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/traceDetailsResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalError"
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionalItem": {
      "type": "object",
      "properties": {
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Address": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "x-go-name": "IP"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Addresses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Address"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Aggregation": {
      "description": "Aggregation is the model representing label's allowed aggregation, transformed from aggregation in MonitoringDashboard config resource",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "singleSelection": {
          "type": "boolean",
          "x-go-name": "SingleSelection"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "App": {
      "type": "object",
      "required": [
        "namespace",
        "name",
        "workloads",
        "serviceNames"
      ],
      "properties": {
        "name": {
          "description": "Name of the application",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "runtimes": {
          "description": "Runtimes and associated dashboards",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Runtime"
          },
          "x-go-name": "Runtimes"
        },
        "serviceNames": {
          "description": "List of service names linked with an application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceNames"
        },
        "workloads": {
          "description": "Workloads for a given application",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadItem"
          },
          "x-go-name": "Workloads"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "AppHealth": {
      "description": "AppHealth contains aggregated health from various sources, for a given app",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        },
        "workloadStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadStatus"
          },
          "x-go-name": "WorkloadStatuses"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "AppList": {
      "type": "object",
      "required": [
        "namespace",
        "applications"
      ],
      "properties": {
        "applications": {
          "description": "Applications for a given namespace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppListItem"
          },
          "x-go-name": "Apps"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "AppListItem": {
      "description": "AppListItem has the necessary information to display the console app list",
      "type": "object",
      "required": [
        "name",
        "istioSidecar"
      ],
      "properties": {
        "istioReferences": {
          "description": "Istio References",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioValidationKey"
          },
          "x-go-name": "IstioReferences"
        },
        "istioSidecar": {
          "description": "Define if all Pods related to the Workloads of this app has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Labels for App",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the application",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Bootstrap": {
      "type": "object",
      "properties": {
        "bootstrap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Bootstrap"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Chart": {
      "description": "Chart is the model representing a custom chart, transformed from charts in MonitoringDashboard config resource",
      "type": "object",
      "properties": {
        "chartType": {
          "type": "string",
          "x-go-name": "ChartType"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max"
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "x-go-name": "Metrics"
        },
        "min": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Min"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "spans": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Spans"
        },
        "startCollapsed": {
          "type": "boolean",
          "x-go-name": "StartCollapsed"
        },
        "unit": {
          "type": "string",
          "x-go-name": "Unit"
        },
        "xAxis": {
          "type": "string",
          "x-go-name": "XAxis"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Cluster": {
      "description": "Cluster holds some metadata about a cluster that is\npart of the mesh.",
      "type": "object",
      "properties": {
        "apiEndpoint": {
          "description": "ApiEndpoint is the URL where the Kubernetes/Cluster API Server can be contacted",
          "type": "string",
          "x-go-name": "ApiEndpoint"
        },
        "isKialiHome": {
          "description": "IsKialiHome specifies if this cluster is hosting this Kiali instance (and the observed Mesh Control Plane)",
          "type": "boolean",
          "x-go-name": "IsKialiHome"
        },
        "kialiInstances": {
          "description": "KialiInstances is the list of Kialis discovered in the cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KialiInstance"
          },
          "x-go-name": "KialiInstances"
        },
        "name": {
          "description": "Name specifies the CLUSTER_ID as known by the Control Plane",
          "type": "string",
          "x-go-name": "Name"
        },
        "network": {
          "description": "Network specifies the logical NETWORK_ID as known by the Control Plane",
          "type": "string",
          "x-go-name": "Network"
        },
        "secretName": {
          "description": "SecretName is the name of the kubernetes \"remote secret\" where data of this cluster was resolved",
          "type": "string",
          "x-go-name": "SecretName"
        }
      },
      "x-go-package": "github.com/kiali/kiali/business"
    },
    "Clusters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Cluster"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ComponentStatus": {
      "type": "object",
      "required": [
        "name",
        "status",
        "is_core"
      ],
      "properties": {
        "is_core": {
          "description": "When true, the component is necessary for Istio to function. Otherwise, it is an addon",
          "type": "boolean",
          "x-go-name": "IsCore",
          "example": true
        },
        "name": {
          "description": "The app label value of the Istio component",
          "type": "string",
          "x-go-name": "Name",
          "example": "istio-ingressgateway"
        },
        "status": {
          "description": "The status of a Istio component",
          "type": "string",
          "x-go-name": "Status",
          "example": "Not Found"
        }
      },
      "x-go-package": "github.com/kiali/kiali/business"
    },
    "Config": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Duration"
        },
        "elements": {
          "$ref": "#/definitions/Elements"
        },
        "graphType": {
          "type": "string",
          "x-go-name": "GraphType"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "ConfigDump": {
      "description": "Root of ConfigDump",
      "type": "object",
      "properties": {
        "configs": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "x-go-name": "Configs"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "ContainerInfo": {
      "description": "ContainerInfo holds container name and image",
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "isProxy": {
          "type": "boolean",
          "x-go-name": "IsProxy"
        },
        "isReady": {
          "type": "boolean",
          "x-go-name": "IsReady"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "CounterMetric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "preferred_direction": {
          "type": "string",
          "x-go-name": "PreferredDirection"
        },
        "query_template": {
          "type": "string",
          "x-go-name": "QueryTemplate"
        },
        "unit": {
          "type": "string",
          "x-go-name": "Unit"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "DashboardRef": {
      "description": "DashboardRef holds template name and title for a custom dashboard",
      "type": "object",
      "properties": {
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Datapoint": {
      "type": "object",
      "properties": {
        "Timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "Value": {
          "type": "number",
          "format": "double"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "EdgeData": {
      "type": "object",
      "properties": {
        "destPrincipal": {
          "description": "App Fields (not required by Cytoscape)",
          "type": "string",
          "x-go-name": "DestPrincipal"
        },
        "id": {
          "description": "Cytoscape Fields",
          "type": "string",
          "x-go-name": "ID"
        },
        "isMTLS": {
          "type": "string",
          "x-go-name": "IsMTLS"
        },
        "responseTime": {
          "type": "string",
          "x-go-name": "ResponseTime"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source"
        },
        "sourcePrincipal": {
          "type": "string",
          "x-go-name": "SourcePrincipal"
        },
        "target": {
          "type": "string",
          "x-go-name": "Target"
        },
        "throughput": {
          "type": "string",
          "x-go-name": "Throughput"
        },
        "traffic": {
          "$ref": "#/definitions/ProtocolTraffic"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "EdgeWrapper": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/EdgeData"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "Elements": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdgeWrapper"
          },
          "x-go-name": "Edges"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeWrapper"
          },
          "x-go-name": "Nodes"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "addresses": {
          "$ref": "#/definitions/Addresses"
        },
        "ports": {
          "$ref": "#/definitions/Ports"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Endpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Endpoint"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "EnvoyProxyDump": {
      "type": "object",
      "properties": {
        "bootstrap": {
          "$ref": "#/definitions/Bootstrap"
        },
        "clusters": {
          "$ref": "#/definitions/Clusters"
        },
        "config_dump": {
          "$ref": "#/definitions/ConfigDump"
        },
        "listeners": {
          "$ref": "#/definitions/Listeners"
        },
        "routes": {
          "$ref": "#/definitions/Routes"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ExternalLink": {
      "description": "ExternalLink provides links to external dashboards (e.g. to Grafana)",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "variables": {
          "$ref": "#/definitions/MonitoringDashboardExternalLinkVariables"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "FieldsV1": {
      "description": "Each key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map\n'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item\n'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list\n'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false",
      "type": "object",
      "title": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.",
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Gateway": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            },
            "servers": {
              "type": "object",
              "x-go-name": "Servers"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Gateways": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Gateway"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "GrafanaInfo": {
      "description": "GrafanaInfo provides information to access Grafana dashboards",
      "type": "object",
      "properties": {
        "externalLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalLink"
          },
          "x-go-name": "ExternalLinks"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "HTTPMatchRequest": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HTTPMatchRule"
          },
          "x-go-name": "Headers"
        },
        "uri": {
          "$ref": "#/definitions/HTTPMatchRule"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "HTTPMatchRule": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "match": {
          "type": "string",
          "x-go-name": "Match"
        },
        "stringMatch": {
          "type": "string",
          "x-go-name": "StringMatch"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "HealthConfig": {
      "description": "HealthConfig maps annotations information for health",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "Host": {
      "description": "Host represents the FQDN format for Istio hostnames",
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string",
          "x-go-name": "Cluster"
        },
        "complete_input": {
          "description": "CompleteInput is true when Service, Namespace and Cluster fields are present.\nIt is true for simple service names and FQDN services.\nIt is false for service.namespace format and service entries.",
          "type": "boolean",
          "x-go-name": "CompleteInput"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "service": {
          "type": "string",
          "x-go-name": "Service"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "IstioCheck": {
      "type": "object",
      "title": "IstioCheck represents an individual check.",
      "required": [
        "message",
        "severity"
      ],
      "properties": {
        "message": {
          "description": "Description of the check",
          "type": "string",
          "x-go-name": "Message",
          "example": "Weight sum should be 100"
        },
        "path": {
          "description": "String that describes where in the yaml file is the check located",
          "type": "string",
          "x-go-name": "Path",
          "example": "spec/http[0]/route"
        },
        "severity": {
          "$ref": "#/definitions/SeverityLevel"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioComponentStatus": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ComponentStatus"
      },
      "x-go-package": "github.com/kiali/kiali/business"
    },
    "IstioConfigDetails": {
      "type": "object",
      "properties": {
        "authorizationPolicy": {
          "$ref": "#/definitions/authorizationPolicy"
        },
        "destinationRule": {
          "$ref": "#/definitions/destinationRule"
        },
        "envoyFilter": {
          "$ref": "#/definitions/envoyFilter"
        },
        "gateway": {
          "$ref": "#/definitions/Gateway"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "objectType": {
          "type": "string",
          "x-go-name": "ObjectType"
        },
        "peerAuthentication": {
          "$ref": "#/definitions/peerAuthentication"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        },
        "requestAuthentication": {
          "$ref": "#/definitions/requestAuthentication"
        },
        "serviceEntry": {
          "$ref": "#/definitions/ServiceEntry"
        },
        "sidecar": {
          "$ref": "#/definitions/Sidecar"
        },
        "validation": {
          "$ref": "#/definitions/IstioValidation"
        },
        "virtualService": {
          "$ref": "#/definitions/virtualService"
        },
        "workloadEntry": {
          "$ref": "#/definitions/workloadEntry"
        },
        "workloadGroup": {
          "$ref": "#/definitions/workloadGroup"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioConfigList": {
      "description": "This type is used for returning a response of IstioConfigList",
      "type": "object",
      "title": "IstioConfigList istioConfigList",
      "required": [
        "namespace"
      ],
      "properties": {
        "authorizationPolicies": {
          "$ref": "#/definitions/authorizationPolicies"
        },
        "destinationRules": {
          "$ref": "#/definitions/destinationRules"
        },
        "envoyFilters": {
          "$ref": "#/definitions/envoyFilters"
        },
        "gateways": {
          "$ref": "#/definitions/Gateways"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "peerAuthentications": {
          "$ref": "#/definitions/peerAuthentications"
        },
        "requestAuthentications": {
          "$ref": "#/definitions/requestAuthentications"
        },
        "serviceEntries": {
          "$ref": "#/definitions/ServiceEntries"
        },
        "sidecars": {
          "$ref": "#/definitions/Sidecars"
        },
        "validations": {
          "$ref": "#/definitions/IstioValidations"
        },
        "virtualServices": {
          "$ref": "#/definitions/virtualServices"
        },
        "workloadEntries": {
          "$ref": "#/definitions/workloadEntries"
        },
        "workloadGroups": {
          "$ref": "#/definitions/workloadGroups"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioConfigPermissions": {
      "description": "IstioConfigPermissions holds a map of ResourcesPermissions per namespace",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ResourcesPermissions"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioValidation": {
      "type": "object",
      "title": "IstioValidation represents a list of checks associated to an Istio object.",
      "required": [
        "name",
        "objectType",
        "valid"
      ],
      "properties": {
        "checks": {
          "description": "Array of checks. It might be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioCheck"
          },
          "x-go-name": "Checks"
        },
        "name": {
          "description": "Name of the object itself",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews"
        },
        "objectType": {
          "description": "Type of the object",
          "type": "string",
          "x-go-name": "ObjectType",
          "example": "virtualservice"
        },
        "references": {
          "description": "Related objects (only validation errors)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioValidationKey"
          },
          "x-go-name": "References"
        },
        "valid": {
          "description": "Represents validity of the object: in case of warning, validity remains as true",
          "type": "boolean",
          "x-go-name": "Valid",
          "example": false
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioValidationKey": {
      "type": "object",
      "title": "IstioValidationKey is the key value composed of an Istio ObjectType and Name.",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "objectType": {
          "type": "string",
          "x-go-name": "ObjectType"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioValidationSummary": {
      "type": "object",
      "title": "IstioValidationSummary represents the number of errors/warnings of a set of Istio Validations.",
      "required": [
        "errors",
        "objectCount",
        "warnings"
      ],
      "properties": {
        "errors": {
          "description": "Number of validations with error severity",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Errors",
          "example": 2
        },
        "objectCount": {
          "description": "Number of Istio Objects analyzed",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ObjectCount",
          "example": 6
        },
        "warnings": {
          "description": "Number of validations with warning severity",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Warnings",
          "example": 4
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "IstioValidations": {
      "title": "IstioValidations represents a set of IstioValidation grouped by IstioValidationKey.",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8CandidateStatus": {
      "type": "object",
      "properties": {
        "criterionAssessment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iter8CriterionAssessment"
          },
          "x-go-name": "CriteriaAssessments"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "requestCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Request_Count"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "weight": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Weight"
        },
        "winProbability": {
          "type": "number",
          "format": "float",
          "x-go-name": "WinProbability"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8Criteria": {
      "type": "object",
      "properties": {
        "isReward": {
          "type": "boolean",
          "x-go-name": "IsReward"
        },
        "metric": {
          "type": "string",
          "x-go-name": "Metric"
        },
        "stopOnFailure": {
          "type": "boolean",
          "x-go-name": "StopOnFailure"
        },
        "tolerance": {
          "type": "number",
          "format": "float",
          "x-go-name": "Tolerance"
        },
        "toleranceType": {
          "type": "string",
          "x-go-name": "ToleranceType"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8CriteriaDetail": {
      "type": "object",
      "properties": {
        "criteria": {
          "$ref": "#/definitions/Iter8Criteria"
        },
        "metric": {
          "$ref": "#/definitions/Iter8Metric"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8CriterionAssessment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "metric_id": {
          "type": "string",
          "x-go-name": "MetricID"
        },
        "statistics": {
          "type": "object",
          "properties": {
            "ratio_statistics": {
              "type": "object",
              "properties": {
                "credible_interval": {
                  "type": "object",
                  "properties": {
                    "lower": {
                      "type": "number",
                      "format": "float",
                      "x-go-name": "Lower"
                    },
                    "upper": {
                      "type": "number",
                      "format": "float",
                      "x-go-name": "Upper"
                    }
                  },
                  "x-go-name": "CredibleInterval"
                },
                "improvement_over_baseline": {
                  "type": "object",
                  "properties": {
                    "lower": {
                      "type": "number",
                      "format": "float",
                      "x-go-name": "Lower"
                    },
                    "upper": {
                      "type": "number",
                      "format": "float",
                      "x-go-name": "Upper"
                    }
                  },
                  "x-go-name": "ImprovementOverBaseline"
                },
                "probability_of_beating_baseline": {
                  "type": "number",
                  "format": "float",
                  "x-go-name": "ProbabilityOfBeatingBaseline"
                },
                "probability_of_being_best_version": {
                  "type": "number",
                  "format": "float",
                  "x-go-name": "ProbabilityOfBeingBestVersion"
                }
              },
              "x-go-name": "RatioStatistics"
            },
            "value": {
              "type": "number",
              "format": "float",
              "x-go-name": "Value"
            }
          },
          "x-go-name": "Statistics"
        },
        "threshold_assessment": {
          "type": "object",
          "properties": {
            "probability_of_satisfying_threshold": {
              "type": "number",
              "format": "float",
              "x-go-name": "ProbabilityOfSatisfyingTHreshold"
            },
            "threshold_breached": {
              "type": "boolean",
              "x-go-name": "ThresholdBreached"
            }
          },
          "x-go-name": "ThresholdAssessment"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "Iter8Duration": {
      "type": "object",
      "properties": {
        "interval": {
          "type": "string",
          "x-go-name": "Interval"
        },
        "maxIterations": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxIterations"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "Iter8ExperimentDetail": {
      "description": "For Displaying Iter8 Experiment Tabs",
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "x-go-name": "Action"
        },
        "criterias": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iter8CriteriaDetail"
          },
          "x-go-name": "CriteriaDetails"
        },
        "duration": {
          "$ref": "#/definitions/Iter8Duration"
        },
        "experimentItem": {
          "$ref": "#/definitions/Iter8ExperimentItem"
        },
        "experimentType": {
          "type": "string",
          "x-go-name": "ExperimentType"
        },
        "networking": {
          "$ref": "#/definitions/Iter8Networking"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        },
        "trafficControl": {
          "$ref": "#/definitions/Iter8TrafficControl"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8ExperimentItem": {
      "description": "For Displaying Iter8 Experiment Details",
      "type": "object",
      "properties": {
        "baseline": {
          "$ref": "#/definitions/Iter8CandidateStatus"
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iter8CandidateStatus"
          },
          "x-go-name": "Candidates"
        },
        "endTime": {
          "type": "string",
          "x-go-name": "EndTime"
        },
        "experimentKind": {
          "type": "string",
          "x-go-name": "ExperimentType"
        },
        "initTime": {
          "type": "string",
          "x-go-name": "InitTime"
        },
        "kind": {
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "phase": {
          "type": "string",
          "x-go-name": "Phase"
        },
        "startTime": {
          "type": "string",
          "x-go-name": "StartTime"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "targetService": {
          "type": "string",
          "x-go-name": "TargetService"
        },
        "targetServiceNamespace": {
          "type": "string",
          "x-go-name": "TargetServiceNamespace"
        },
        "winner": {
          "$ref": "#/definitions/Iter8SuccessCrideriaStatus"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8Host": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "x-go-name": "Gateway"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "Iter8Info": {
      "type": "object",
      "properties": {
        "analyticsImgVersion": {
          "type": "string",
          "x-go-name": "AnalyticsImageVersion"
        },
        "controllerImgVersion": {
          "type": "string",
          "x-go-name": "ControllerImageVersion"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "supportedVersion": {
          "type": "boolean",
          "x-go-name": "SupportedVersion"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8Match": {
      "description": "Match contains matching criteria for requests",
      "type": "object",
      "properties": {
        "http": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HTTPMatchRequest"
          },
          "x-go-name": "HTTP"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8Metric": {
      "type": "object",
      "properties": {
        "denominator": {
          "$ref": "#/definitions/CounterMetric"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numerator": {
          "$ref": "#/definitions/CounterMetric"
        },
        "preferred_direction": {
          "type": "string",
          "x-go-name": "PreferredDirection"
        },
        "zero_to_one": {
          "type": "boolean",
          "x-go-name": "ZeroToOne"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8Networking": {
      "type": "object",
      "properties": {
        "hosts": {
          "description": "List of hosts used to receive external traffic\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iter8Host"
          },
          "x-go-name": "Hosts"
        },
        "id": {
          "description": "id of router\n+optional",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/kiali/kiali/kubernetes"
    },
    "Iter8SuccessCrideriaStatus": {
      "type": "object",
      "properties": {
        "current_best_version": {
          "type": "string",
          "x-go-name": "Winner"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "probability_of_winning_for_best_version": {
          "type": "number",
          "format": "float",
          "x-go-name": "Probability"
        },
        "winning_version_found": {
          "type": "boolean",
          "x-go-name": "WinnerFound"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Iter8TrafficControl": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/Iter8Match"
        },
        "maxIncrement": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "MaxIncrement"
        },
        "onTermination": {
          "type": "string",
          "x-go-name": "OnTermination"
        },
        "percentage": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Percentage"
        },
        "strategy": {
          "type": "string",
          "x-go-name": "Strategy"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "JaegerInfo": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "integration": {
          "type": "boolean",
          "x-go-name": "Integration"
        },
        "namespaceSelector": {
          "type": "boolean",
          "x-go-name": "NamespaceSelector"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "whiteListIstioSystem": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "WhiteListIstioSystem"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "JaegerSpan": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Duration"
        },
        "flags": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Flags"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Log"
          },
          "x-go-name": "Logs"
        },
        "operationName": {
          "type": "string",
          "x-go-name": "OperationName"
        },
        "parentSpanID": {
          "$ref": "#/definitions/SpanID"
        },
        "process": {
          "$ref": "#/definitions/Process"
        },
        "processID": {
          "$ref": "#/definitions/ProcessID"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "References"
        },
        "spanID": {
          "$ref": "#/definitions/SpanID"
        },
        "startTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "StartTime"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Tags"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        },
        "traceSize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TraceSize"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Warnings"
        }
      },
      "x-go-package": "github.com/kiali/kiali/jaeger"
    },
    "KeyValue": {
      "type": "object",
      "title": "KeyValue is a key-value pair with typed value.",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "type": {
          "$ref": "#/definitions/ValueType"
        },
        "value": {
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "KialiInstance": {
      "description": "KialiInstance represents a Kiali installation. It holds some data about\nwhere and how Kiali was deployed.",
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace is the name of the namespace where is Kiali installed on.",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "operatorResource": {
          "description": "OperatorResource contains the namespace and the name of the Kiali CR that the user\ncreated to install Kiali via the operator. This can be blank if the operator wasn't used\nto install Kiali. This resource is populated from annotations in the Service. It has\nthe format \"namespace/resource_name\".",
          "type": "string",
          "x-go-name": "OperatorResource"
        },
        "serviceName": {
          "description": "ServiceName is the name of the Kubernetes service associated to the Kiali installation. The Kiali Service is the\nentity that is looked for in order to determine if a Kiali instance is available.",
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "url": {
          "description": "Url is the URI that can be used to access Kiali.",
          "type": "string",
          "x-go-name": "Url"
        },
        "version": {
          "description": "Version is the Kiali version as reported by annotations in the Service.",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/kiali/kiali/business"
    },
    "Listener": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "destination": {
          "type": "string",
          "x-go-name": "Destination"
        },
        "match": {
          "type": "string",
          "x-go-name": "Match"
        },
        "port": {
          "type": "number",
          "format": "double",
          "x-go-name": "Port"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Listeners": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Listener"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Log": {
      "description": "Log is a log emitted in a span",
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Fields"
        },
        "timestamp": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "MTLSStatus": {
      "description": "MTLSStatus describes the current mTLS status of a mesh entity",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "mTLS status: MTLS_ENABLED, MTLS_PARTIALLY_ENABLED, MTLS_NOT_ENABLED",
          "type": "string",
          "x-go-name": "Status",
          "example": "MTLS_ENABLED"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
          "type": "string",
          "x-go-name": "FieldsType"
        },
        "fieldsV1": {
          "$ref": "#/definitions/FieldsV1"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string",
          "x-go-name": "Manager"
        },
        "operation": {
          "$ref": "#/definitions/ManagedFieldsOperationType"
        },
        "time": {
          "$ref": "#/definitions/Time"
        }
      },
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "ManagedFieldsOperationType": {
      "type": "string",
      "title": "ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry being created.",
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Metric": {
      "type": "object",
      "properties": {
        "datapoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Datapoint"
          },
          "x-go-name": "Datapoints"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "stat": {
          "type": "string",
          "x-go-name": "Stat"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "MetricsStats": {
      "description": "MetricsStats contains opinionated statistics on metrics on a single target. Currently limited to response times (avg/percentiles over interval)",
      "type": "object",
      "properties": {
        "responseTimes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stat"
          },
          "x-go-name": "ResponseTimes"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "MetricsStatsQueries": {
      "type": "object",
      "properties": {
        "Queries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsStatsQuery"
          }
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "MetricsStatsQuery": {
      "type": "object",
      "properties": {
        "Avg": {
          "type": "boolean"
        },
        "Direction": {
          "type": "string"
        },
        "PeerTarget": {
          "$ref": "#/definitions/Target"
        },
        "Quantiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Target": {
          "$ref": "#/definitions/Target"
        },
        "interval": {
          "type": "string",
          "x-go-name": "RawInterval"
        },
        "queryTime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RawQueryTime"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "MonitoringDashboard": {
      "description": "MonitoringDashboard is the model representing custom monitoring dashboard, transformed from MonitoringDashboard config resource",
      "type": "object",
      "properties": {
        "aggregations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Aggregation"
          },
          "x-go-name": "Aggregations"
        },
        "charts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Chart"
          },
          "x-go-name": "Charts"
        },
        "externalLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalLink"
          },
          "x-go-name": "ExternalLinks"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "MonitoringDashboardExternalLinkVariables": {
      "type": "object",
      "properties": {
        "App": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "Service": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Workload": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/kiali/kiali/config/dashboards"
    },
    "NamespaceAppHealth": {
      "description": "NamespaceAppHealth is an alias of map of app name x health",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AppHealth"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "NodeData": {
      "type": "object",
      "properties": {
        "aggregate": {
          "type": "string",
          "x-go-name": "Aggregate"
        },
        "app": {
          "type": "string",
          "x-go-name": "App"
        },
        "cluster": {
          "type": "string",
          "x-go-name": "Cluster"
        },
        "destServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceName"
          },
          "x-go-name": "DestServices"
        },
        "hasCB": {
          "type": "boolean",
          "x-go-name": "HasCB"
        },
        "hasFaultInjection": {
          "type": "boolean",
          "x-go-name": "HasFaultInjection"
        },
        "hasHealthConfig": {
          "$ref": "#/definitions/HealthConfig"
        },
        "hasMissingSC": {
          "type": "boolean",
          "x-go-name": "HasMissingSC"
        },
        "hasRequestRouting": {
          "type": "boolean",
          "x-go-name": "HasRequestRouting"
        },
        "hasRequestTimeout": {
          "type": "boolean",
          "x-go-name": "HasRequestTimeout"
        },
        "hasTCPTrafficShifting": {
          "type": "boolean",
          "x-go-name": "HasTCPTrafficShifting"
        },
        "hasTrafficShifting": {
          "type": "boolean",
          "x-go-name": "HasTrafficShifting"
        },
        "hasVS": {
          "type": "boolean",
          "x-go-name": "HasVS"
        },
        "id": {
          "description": "Cytoscape Fields",
          "type": "string",
          "x-go-name": "ID"
        },
        "isBox": {
          "type": "string",
          "x-go-name": "IsBox"
        },
        "isDead": {
          "type": "boolean",
          "x-go-name": "IsDead"
        },
        "isIdle": {
          "type": "boolean",
          "x-go-name": "IsIdle"
        },
        "isInaccessible": {
          "type": "boolean",
          "x-go-name": "IsInaccessible"
        },
        "isOutside": {
          "type": "boolean",
          "x-go-name": "IsOutside"
        },
        "isRoot": {
          "type": "boolean",
          "x-go-name": "IsRoot"
        },
        "isServiceEntry": {
          "$ref": "#/definitions/SEInfo"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "nodeType": {
          "description": "App Fields (not required by Cytoscape)",
          "type": "string",
          "x-go-name": "NodeType"
        },
        "parent": {
          "type": "string",
          "x-go-name": "Parent"
        },
        "service": {
          "type": "string",
          "x-go-name": "Service"
        },
        "traffic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProtocolTraffic"
          },
          "x-go-name": "Traffic"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "workload": {
          "type": "string",
          "x-go-name": "Workload"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "NodeWrapper": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/NodeData"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations\n+optional",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in different clusters.\nThis field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\n+optional",
          "type": "string",
          "x-go-name": "ClusterName"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/Time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DeletionGracePeriodSeconds"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/Time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Finalizers"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will\nNOT return a 409 - instead, it will either return 201 Created or 500 with Reason\nServerTimeout indicating a unique name could not be found in the time allotted, and the client\nshould retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
          "type": "string",
          "x-go-name": "GenerateName"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Generation"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManagedFieldsEntry"
          },
          "x-go-name": "ManagedFields"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional",
          "type": "string",
          "x-go-name": "Namespace"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerReference"
          },
          "x-go-name": "OwnerReferences"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object.\nPopulated by the system.\nRead-only.\n\nDEPRECATED\nKubernetes will stop propagating this field in 1.20 release and the field is planned\nto be removed in 1.21 release.\n+optional",
          "type": "string",
          "x-go-name": "SelfLink"
        },
        "uid": {
          "$ref": "#/definitions/UID"
        }
      },
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
          "type": "boolean",
          "x-go-name": "BlockOwnerDeletion"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.\n+optional",
          "type": "boolean",
          "x-go-name": "Controller"
        },
        "kind": {
          "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string",
          "x-go-name": "Kind"
        },
        "name": {
          "description": "Name of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string",
          "x-go-name": "Name"
        },
        "uid": {
          "$ref": "#/definitions/UID"
        }
      },
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "Pod": {
      "description": "Pod holds a subset of v1.Pod data that is meaningful in Kiali",
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Annotations"
        },
        "appLabel": {
          "type": "boolean",
          "x-go-name": "AppLabel"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "Containers"
        },
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "CreatedBy"
        },
        "istioContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "IstioContainers"
        },
        "istioInitContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerInfo"
          },
          "x-go-name": "IstioInitContainers"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "proxyStatus": {
          "$ref": "#/definitions/ProxyStatus"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "statusMessage": {
          "type": "string",
          "x-go-name": "StatusMessage"
        },
        "statusReason": {
          "type": "string",
          "x-go-name": "StatusReason"
        },
        "versionLabel": {
          "type": "boolean",
          "x-go-name": "VersionLabel"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Pods": {
      "description": "Pods alias for list of Pod structs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Pod"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Port": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Port"
        },
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Ports": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Port"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Process": {
      "description": "Process is the process emitting a set of spans",
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "ProcessID": {
      "type": "string",
      "title": "ProcessID is a hashed value of the Process struct that is unique within the trace.",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "ProtocolTraffic": {
      "description": "ProtocolTraffic supplies all of the traffic information for a single protocol",
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        },
        "rates": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Rates"
        },
        "responses": {
          "$ref": "#/definitions/Responses"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "ProxyStatus": {
      "description": "In healthy scenarios all variables should be true.\nIf at least one variable is false, then the proxy isn't fully sync'ed with pilot.",
      "type": "object",
      "title": "ProxyStatus gives the sync status of the sidecar proxy.",
      "properties": {
        "CDS": {
          "type": "string"
        },
        "EDS": {
          "type": "string"
        },
        "LDS": {
          "type": "string"
        },
        "RDS": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Reference": {
      "description": "Reference is a reference from one span to another",
      "type": "object",
      "properties": {
        "refType": {
          "$ref": "#/definitions/ReferenceType"
        },
        "spanID": {
          "$ref": "#/definitions/SpanID"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "ReferenceType": {
      "description": "ReferenceType is the reference type of one span to another",
      "type": "string",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "RequestHealth": {
      "description": "RequestHealth holds several stats about recent request errors\nInbound//Outbound are the rates of requests by protocol and status_code.\nExample:   Inbound: { \"http\": {\"200\": 1.5, \"400\": 2.3}, \"grpc\": {\"1\": 1.2} }",
      "type": "object",
      "properties": {
        "healthAnnotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "HealthAnnotations"
        },
        "inbound": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "x-go-name": "Inbound"
        },
        "outbound": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "x-go-name": "Outbound"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ResourcePermissions": {
      "description": "ResourcePermissions holds permission flags for an object type\nTrue means allowed.",
      "type": "object",
      "properties": {
        "create": {
          "type": "boolean",
          "x-go-name": "Create"
        },
        "delete": {
          "type": "boolean",
          "x-go-name": "Delete"
        },
        "update": {
          "type": "boolean",
          "x-go-name": "Update"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ResourcesPermissions": {
      "description": "ResourcesPermissions holds a map of permission flags per resource",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ResourcePermissions"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ResponseDetail": {
      "type": "object",
      "title": "ResponseDetail holds information broken down by response code.",
      "properties": {
        "flags": {
          "$ref": "#/definitions/ResponseFlags"
        },
        "hosts": {
          "$ref": "#/definitions/ResponseHosts"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "ResponseFlags": {
      "description": "\"200\" : {\n\"-\"     : \"80.0\",\n\"DC\"    : \"10.0\",\n\"FI,FD\" : \"10.0\"\n}, ...",
      "type": "object",
      "title": "ResponseFlags is a map of maps. Each response code is broken down by responseFlags:percentageOfTraffic, e.g.:",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "ResponseHosts": {
      "description": "\"200\" : {\n\"www.google.com\" : \"80.0\",\n\"www.yahoo.com\"  : \"20.0\"\n}, ...",
      "type": "object",
      "title": "ResponseHosts is a map of maps. Each response host is broken down by responseFlags:percentageOfTraffic, e.g.:",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "Responses": {
      "description": "Responses maps responseCodes to detailed information for that code",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ResponseDetail"
      },
      "x-go-package": "github.com/kiali/kiali/graph/config/cytoscape"
    },
    "Route": {
      "type": "object",
      "properties": {
        "domains": {
          "$ref": "#/definitions/Host"
        },
        "match": {
          "type": "string",
          "x-go-name": "Match"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "virtual_service": {
          "type": "string",
          "x-go-name": "VirtualService"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Routes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Route"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Runtime": {
      "description": "Runtime holds the runtime title and associated dashboard template(s)",
      "type": "object",
      "properties": {
        "dashboardRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardRef"
          },
          "x-go-name": "DashboardRefs"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "SEInfo": {
      "description": "SEInfo provides static information about the service entry",
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Hosts"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph"
    },
    "Service": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "externalName": {
          "type": "string",
          "x-go-name": "ExternalName"
        },
        "healthAnnotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "HealthAnnotations"
        },
        "ip": {
          "type": "string",
          "x-go-name": "Ip"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "ports": {
          "$ref": "#/definitions/Ports"
        },
        "resourceVersion": {
          "type": "string",
          "x-go-name": "ResourceVersion"
        },
        "selectors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Selectors"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceDetails": {
      "type": "object",
      "properties": {
        "additionalDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalItem"
          },
          "x-go-name": "AdditionalDetails"
        },
        "destinationRules": {
          "$ref": "#/definitions/destinationRules"
        },
        "endpoints": {
          "$ref": "#/definitions/Endpoints"
        },
        "health": {
          "$ref": "#/definitions/ServiceHealth"
        },
        "istioSidecar": {
          "type": "boolean",
          "x-go-name": "IstioSidecar"
        },
        "namespaceMTLS": {
          "$ref": "#/definitions/MTLSStatus"
        },
        "service": {
          "$ref": "#/definitions/Service"
        },
        "validations": {
          "$ref": "#/definitions/IstioValidations"
        },
        "virtualServices": {
          "$ref": "#/definitions/virtualServices"
        },
        "workloads": {
          "$ref": "#/definitions/WorkloadOverviews"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceEntries": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ServiceEntry"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceEntry": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "addresses": {
              "type": "object",
              "x-go-name": "Addresses"
            },
            "endpoints": {
              "type": "object",
              "x-go-name": "Endpoints"
            },
            "exportTo": {
              "type": "object",
              "x-go-name": "ExportTo"
            },
            "hosts": {
              "type": "object",
              "x-go-name": "Hosts"
            },
            "location": {
              "type": "object",
              "x-go-name": "Location"
            },
            "ports": {
              "type": "object",
              "x-go-name": "Ports"
            },
            "resolution": {
              "type": "object",
              "x-go-name": "Resolution"
            },
            "subjectAltNames": {
              "type": "object",
              "x-go-name": "SubjectAltNames"
            },
            "workloadSelector": {
              "type": "object",
              "x-go-name": "WorkloadSelector"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceHealth": {
      "description": "ServiceHealth contains aggregated health from various sources, for a given service",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceList": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceOverview"
          },
          "x-go-name": "Services"
        },
        "validations": {
          "$ref": "#/definitions/IstioValidations"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "ServiceName": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string",
          "x-go-name": "Cluster"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        }
      },
      "x-go-package": "github.com/kiali/kiali/graph"
    },
    "ServiceOverview": {
      "type": "object",
      "required": [
        "name",
        "istioSidecar",
        "appLabel"
      ],
      "properties": {
        "additionalDetailSample": {
          "$ref": "#/definitions/AdditionalItem"
        },
        "appLabel": {
          "description": "Has label app",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "healthAnnotations": {
          "description": "Annotations of the service",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "HealthAnnotations"
        },
        "istioReferences": {
          "description": "Istio References",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioValidationKey"
          },
          "x-go-name": "IstioReferences"
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Service has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "kialiWizard": {
          "description": "Kiali Wizard scenario, if any",
          "type": "string",
          "x-go-name": "KialiWizard"
        },
        "labels": {
          "description": "Labels for Service",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the Service",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "SeverityLevel": {
      "type": "string",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Sidecar": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "egress": {
              "type": "object",
              "x-go-name": "Egress"
            },
            "ingress": {
              "type": "object",
              "x-go-name": "Ingress"
            },
            "localhost": {
              "type": "object",
              "x-go-name": "Localhost"
            },
            "outboundTrafficPolicy": {
              "type": "object",
              "x-go-name": "OutboundTrafficPolicy"
            },
            "workloadSelector": {
              "type": "object",
              "x-go-name": "WorkloadSelector"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Sidecars": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sidecar"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Span": {
      "description": "Span is a span denoting a piece of work in some infrastructure\nWhen converting to UI model, ParentSpanID and Process should be dereferenced into\nReferences and ProcessID, respectively.\nWhen converting to ES model, ProcessID and Warnings should be omitted. Even if\nincluded, ES with dynamic settings off will automatically ignore unneeded fields.",
      "type": "object",
      "properties": {
        "duration": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Duration"
        },
        "flags": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Flags"
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Log"
          },
          "x-go-name": "Logs"
        },
        "operationName": {
          "type": "string",
          "x-go-name": "OperationName"
        },
        "parentSpanID": {
          "$ref": "#/definitions/SpanID"
        },
        "process": {
          "$ref": "#/definitions/Process"
        },
        "processID": {
          "$ref": "#/definitions/ProcessID"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          },
          "x-go-name": "References"
        },
        "spanID": {
          "$ref": "#/definitions/SpanID"
        },
        "startTime": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "StartTime"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          },
          "x-go-name": "Tags"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Warnings"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "SpanID": {
      "description": "SpanID is the id of a span",
      "type": "string",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "Stat": {
      "description": "Stat holds arbitrary stat name \u0026 value",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "number",
          "format": "double",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "StatusInfo": {
      "description": "This is used for returning a response of Kiali Status",
      "type": "object",
      "title": "StatusInfo statusInfo",
      "required": [
        "status",
        "externalServices"
      ],
      "properties": {
        "externalServices": {
          "description": "An array of external services installed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/externalServiceInfo"
          },
          "x-go-name": "ExternalServices"
        },
        "status": {
          "description": "The state of Kiali\nA hash of key,values with versions of Kiali and state",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Status"
        },
        "warningMessages": {
          "description": "An array of warningMessages",
          "type": "array",
          "items": {
            "type": "string",
            "example": "Istio version 0.7.1 is not supported, the version should be 0.8.0"
          },
          "x-go-name": "WarningMessages"
        }
      },
      "x-go-package": "github.com/kiali/kiali/status"
    },
    "Target": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "Time": {
      "description": "+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false",
      "type": "object",
      "title": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.",
      "x-go-package": "k8s.io/apimachinery/pkg/apis/meta/v1"
    },
    "TokenResponse": {
      "description": "This is used for returning the token",
      "type": "object",
      "title": "TokenResponse tokenResponse",
      "required": [
        "username",
        "token",
        "expiresOn"
      ],
      "properties": {
        "expiresOn": {
          "description": "The expired time for the token\nA string with the Datetime when the token will be expired",
          "type": "string",
          "x-go-name": "ExpiresOn",
          "example": "Thu, 07 Mar 2019 17:50:26 +0000"
        },
        "token": {
          "description": "The authentication token\nA string with the authentication token for the user",
          "type": "string",
          "x-go-name": "Token",
          "example": "zI1NiIsIsR5cCI6IkpXVCJ9.ezJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNTI5NTIzNjU0fQ.PPZvRGnR6VA4v7FmgSfQcGQr-VD"
        },
        "username": {
          "description": "The username for the token\nA string with the user's username",
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-package": "github.com/kiali/kiali/handlers"
    },
    "Trace": {
      "description": "Trace is a list of spans",
      "type": "object",
      "properties": {
        "processes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Process"
          },
          "x-go-name": "Processes"
        },
        "spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Span"
          },
          "x-go-name": "Spans"
        },
        "traceID": {
          "$ref": "#/definitions/TraceID"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Warnings"
        }
      },
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "TraceID": {
      "type": "string",
      "title": "TraceID is the shared trace ID of all spans in the trace.",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "UID": {
      "description": "UID is a type that holds unique ID values, including UUIDs.  Because we\ndon't ONLY use UUIDs, this is an alias to string.  Being a type captures\nintent and helps make sure that UIDs and names do not get conflated.",
      "type": "string",
      "x-go-package": "k8s.io/apimachinery/pkg/types"
    },
    "ValueType": {
      "type": "string",
      "title": "ValueType is the type of a value stored in KeyValue struct.",
      "x-go-package": "github.com/jaegertracing/jaeger/model/json"
    },
    "Workload": {
      "description": "Workload has the details of a workload",
      "type": "object",
      "required": [
        "name",
        "type",
        "createdAt",
        "resourceVersion",
        "istioSidecar",
        "appLabel",
        "versionLabel",
        "podCount",
        "desiredReplicas",
        "currentReplicas",
        "availableReplicas"
      ],
      "properties": {
        "additionalDetailSample": {
          "$ref": "#/definitions/AdditionalItem"
        },
        "additionalDetails": {
          "description": "Additional details to display, such as configured annotations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalItem"
          },
          "x-go-name": "AdditionalDetails"
        },
        "appLabel": {
          "description": "Define if Pods related to this Workload has the label App",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "availableReplicas": {
          "description": "Number of available replicas",
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas",
          "example": 1
        },
        "createdAt": {
          "description": "Creation timestamp (in RFC3339 format)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2018-07-31T12:24:17Z"
        },
        "currentReplicas": {
          "description": "Number of current replicas pods that matches controller selector labels",
          "type": "integer",
          "format": "int32",
          "x-go-name": "CurrentReplicas",
          "example": 2
        },
        "desiredReplicas": {
          "description": "Number of desired replicas defined by the user in the controller Spec",
          "type": "integer",
          "format": "int32",
          "x-go-name": "DesiredReplicas",
          "example": 2
        },
        "healthAnnotations": {
          "description": "HealthAnnotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "HealthAnnotations"
        },
        "istioInjectionAnnotation": {
          "description": "Define if Workload has an explicit Istio policy annotation\nIt's mapped as a pointer to show three values nil, true, false",
          "type": "boolean",
          "x-go-name": "IstioInjectionAnnotation"
        },
        "istioReferences": {
          "description": "Istio References",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioValidationKey"
          },
          "x-go-name": "IstioReferences"
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Workload labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        },
        "podCount": {
          "description": "Number of current workload pods",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PodCount",
          "example": 1
        },
        "pods": {
          "$ref": "#/definitions/Pods"
        },
        "resourceVersion": {
          "description": "Kubernetes ResourceVersion",
          "type": "string",
          "x-go-name": "ResourceVersion",
          "example": "192892127"
        },
        "runtimes": {
          "description": "Runtimes and associated dashboards",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Runtime"
          },
          "x-go-name": "Runtimes"
        },
        "services": {
          "$ref": "#/definitions/Services"
        },
        "type": {
          "description": "Type of the workload",
          "type": "string",
          "x-go-name": "Type",
          "example": "deployment"
        },
        "versionLabel": {
          "description": "Define if Pods related to this Workload has the label Version",
          "type": "boolean",
          "x-go-name": "VersionLabel",
          "example": true
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadHealth": {
      "description": "WorkloadHealth contains aggregated health from various sources, for a given workload",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestHealth"
        },
        "workloadStatus": {
          "$ref": "#/definitions/WorkloadStatus"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadItem": {
      "type": "object",
      "required": [
        "workloadName",
        "istioSidecar"
      ],
      "properties": {
        "istioSidecar": {
          "description": "Define if all Pods related to the Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "workloadName": {
          "description": "Name of a workload member of an application",
          "type": "string",
          "x-go-name": "WorkloadName",
          "example": "reviews-v1"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadList": {
      "type": "object",
      "required": [
        "namespace",
        "workloads"
      ],
      "properties": {
        "namespace": {
          "$ref": "#/definitions/namespace"
        },
        "workloads": {
          "description": "Workloads for a given namespace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadListItem"
          },
          "x-go-name": "Workloads"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadListItem": {
      "description": "WorkloadListItem has the necessary information to display the console workload list",
      "type": "object",
      "required": [
        "name",
        "type",
        "createdAt",
        "resourceVersion",
        "istioSidecar",
        "appLabel",
        "versionLabel",
        "podCount"
      ],
      "properties": {
        "additionalDetailSample": {
          "$ref": "#/definitions/AdditionalItem"
        },
        "appLabel": {
          "description": "Define if Pods related to this Workload has the label App",
          "type": "boolean",
          "x-go-name": "AppLabel",
          "example": true
        },
        "createdAt": {
          "description": "Creation timestamp (in RFC3339 format)",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2018-07-31T12:24:17Z"
        },
        "healthAnnotations": {
          "description": "HealthAnnotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "HealthAnnotations"
        },
        "istioInjectionAnnotation": {
          "description": "Define if Workload has an explicit Istio policy annotation\nIt's mapped as a pointer to show three values nil, true, false",
          "type": "boolean",
          "x-go-name": "IstioInjectionAnnotation"
        },
        "istioReferences": {
          "description": "Istio References",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IstioValidationKey"
          },
          "x-go-name": "IstioReferences"
        },
        "istioSidecar": {
          "description": "Define if Pods related to this Workload has an IstioSidecar deployed",
          "type": "boolean",
          "x-go-name": "IstioSidecar",
          "example": true
        },
        "labels": {
          "description": "Workload labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "Name of the workload",
          "type": "string",
          "x-go-name": "Name",
          "example": "reviews-v1"
        },
        "podCount": {
          "description": "Number of current workload pods",
          "type": "integer",
          "format": "int64",
          "x-go-name": "PodCount",
          "example": 1
        },
        "resourceVersion": {
          "description": "Kubernetes ResourceVersion",
          "type": "string",
          "x-go-name": "ResourceVersion",
          "example": "192892127"
        },
        "type": {
          "description": "Type of the workload",
          "type": "string",
          "x-go-name": "Type",
          "example": "deployment"
        },
        "versionLabel": {
          "description": "Define if Pods related to this Workload has the label Version",
          "type": "boolean",
          "x-go-name": "VersionLabel",
          "example": true
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadOverviews": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WorkloadListItem"
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "WorkloadStatus": {
      "description": "WorkloadStatus gives\nnumber of desired replicas defined in the Spec of a controller\nnumber of current replicas that matches selector of a controller\nnumber of available replicas for a given workload\nIn healthy scenarios all variables should point same value.\nWhen something wrong happens the different values can indicate an unhealthy situation.\ni.e.\ndesired = 1, current = 10, available = 0 would means that a user scaled down a workload from 10 to 1\nbut in the operaton 10 pods showed problems, so no pod is available/ready but user will see 10 pods under a workload",
      "type": "object",
      "properties": {
        "availableReplicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "AvailableReplicas"
        },
        "currentReplicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "CurrentReplicas"
        },
        "desiredReplicas": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "DesiredReplicas"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "syncedProxies": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "SyncedProxies"
        }
      },
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "authorizationPolicies": {
      "description": "This is used for returning an array of AuthorizationPolicies",
      "type": "array",
      "title": "AuthorizationPolicies authorizationPolicies",
      "items": {
        "$ref": "#/definitions/authorizationPolicy"
      },
      "x-go-name": "AuthorizationPolicies",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "authorizationPolicy": {
      "description": "This is used for returning an AuthorizationPolicy",
      "type": "object",
      "title": "AuthorizationPolicy authorizationPolicy",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "action": {
              "type": "object",
              "x-go-name": "Action"
            },
            "rules": {
              "type": "object",
              "x-go-name": "Rules"
            },
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "AuthorizationPolicy",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "destinationRule": {
      "description": "This is used for returning a DestinationRule",
      "type": "object",
      "title": "DestinationRule destinationRule",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "exportTo": {
              "type": "object",
              "x-go-name": "ExportTo"
            },
            "host": {
              "type": "object",
              "x-go-name": "Host"
            },
            "subsets": {
              "type": "object",
              "x-go-name": "Subsets"
            },
            "trafficPolicy": {
              "type": "object",
              "x-go-name": "TrafficPolicy"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "DestinationRule",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "destinationRules": {
      "description": "This is used for returning an array of DestinationRules",
      "type": "object",
      "title": "DestinationRules destinationRules",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/destinationRule"
          },
          "x-go-name": "Items"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        }
      },
      "x-go-name": "DestinationRules",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "envoyFilter": {
      "description": "This is used for returning an EnvoyFilter",
      "type": "object",
      "title": "EnvoyFilter envoyFilter",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "configPatches": {
              "type": "object",
              "x-go-name": "ConfigPatches"
            },
            "workloadSelector": {
              "type": "object",
              "x-go-name": "WorkloadSelector"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "EnvoyFilter",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "envoyFilters": {
      "description": "This is used for returning an array of EnvoyFilter",
      "type": "array",
      "title": "EnvoyFilters envoyFilters",
      "items": {
        "$ref": "#/definitions/envoyFilter"
      },
      "x-go-name": "EnvoyFilters",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "externalServiceInfo": {
      "description": "This is used for returning a response of Kiali Status",
      "type": "object",
      "title": "Status response model",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The name of the service",
          "type": "string",
          "x-go-name": "Name",
          "example": "Istio"
        },
        "url": {
          "description": "The service url",
          "type": "string",
          "x-go-name": "Url",
          "example": "jaeger-query-istio-system.127.0.0.1.nip.io"
        },
        "version": {
          "description": "The installed version of the service",
          "type": "string",
          "x-go-name": "Version",
          "example": "0.8.0"
        }
      },
      "x-go-name": "ExternalServiceInfo",
      "x-go-package": "github.com/kiali/kiali/status"
    },
    "namespace": {
      "description": "A Namespace provide a scope for names\nThis type is used to describe a set of objects.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "labels": {
          "description": "Labels for Namespace",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        },
        "name": {
          "description": "The id of the namespace.",
          "type": "string",
          "x-go-name": "Name",
          "example": "istio-system"
        }
      },
      "x-go-name": "Namespace",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "peerAuthentication": {
      "description": "This is used for returning an PeerAuthentication",
      "type": "object",
      "title": "PeerAuthentication peerAuthentication",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "mtls": {
              "type": "object",
              "x-go-name": "Mtls"
            },
            "portLevelMtls": {
              "type": "object",
              "x-go-name": "PortLevelMtls"
            },
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "PeerAuthentication",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "peerAuthentications": {
      "description": "This is used for returning an array of PeerAuthentication",
      "type": "array",
      "title": "PeerAuthentications peerAuthentications",
      "items": {
        "$ref": "#/definitions/peerAuthentication"
      },
      "x-go-name": "PeerAuthentications",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "requestAuthentication": {
      "description": "This is used for returning an RequestAuthentication",
      "type": "object",
      "title": "RequestAuthentication requestAuthentication",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "jwtRules": {
              "type": "object",
              "x-go-name": "JwtRules"
            },
            "selector": {
              "type": "object",
              "x-go-name": "Selector"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "RequestAuthentication",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "requestAuthentications": {
      "description": "This is used for returning an array of RequestAuthentication",
      "type": "array",
      "title": "RequestAuthentications requestAuthentications",
      "items": {
        "$ref": "#/definitions/requestAuthentication"
      },
      "x-go-name": "RequestAuthentications",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "virtualService": {
      "description": "This type is used for returning a VirtualService",
      "type": "object",
      "title": "VirtualService virtualService",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "exportTo": {
              "type": "object",
              "x-go-name": "ExportTo"
            },
            "gateways": {
              "type": "object",
              "x-go-name": "Gateways"
            },
            "hosts": {
              "type": "object",
              "x-go-name": "Hosts"
            },
            "http": {
              "type": "object",
              "x-go-name": "Http"
            },
            "tcp": {
              "type": "object",
              "x-go-name": "Tcp"
            },
            "tls": {
              "type": "object",
              "x-go-name": "Tls"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "VirtualService",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "virtualServices": {
      "description": "This type is used for returning an array of VirtualServices with some permission flags",
      "type": "object",
      "title": "VirtualServices virtualServices",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/virtualService"
          },
          "x-go-name": "Items"
        },
        "permissions": {
          "$ref": "#/definitions/ResourcePermissions"
        }
      },
      "x-go-name": "VirtualServices",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "workloadEntries": {
      "description": "This is used for returning an array of WorkloadEntry",
      "type": "array",
      "title": "WorkloadEntries workloadEntries",
      "items": {
        "$ref": "#/definitions/workloadEntry"
      },
      "x-go-name": "WorkloadEntries",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "workloadEntry": {
      "description": "This is used for returning an WorkloadEntry",
      "type": "object",
      "title": "WorkloadEntry workloadEntry",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "address": {
              "type": "object",
              "x-go-name": "Address"
            },
            "labels": {
              "type": "object",
              "x-go-name": "Labels"
            },
            "locality": {
              "type": "object",
              "x-go-name": "Locality"
            },
            "network": {
              "type": "object",
              "x-go-name": "Network"
            },
            "ports": {
              "type": "object",
              "x-go-name": "Ports"
            },
            "serviceAccount": {
              "type": "object",
              "x-go-name": "ServiceAccount"
            },
            "weight": {
              "type": "object",
              "x-go-name": "Weight"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "WorkloadEntry",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "workloadGroup": {
      "description": "This is used for returning a WorkloadGroup",
      "type": "object",
      "title": "WorkloadGroup workloadGroup",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
          "type": "string",
          "x-go-name": "APIVersion"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
          "type": "string",
          "x-go-name": "Kind"
        },
        "metadata": {
          "$ref": "#/definitions/ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "metadata": {
              "description": "This is not an error, the WorkloadGroup has a Metadata inside the Spec\nhttps://istio.io/latest/docs/reference/config/networking/workload-group/#WorkloadGroup",
              "type": "object",
              "x-go-name": "Metadata"
            },
            "probe": {
              "type": "object",
              "x-go-name": "Probe"
            },
            "template": {
              "type": "object",
              "x-go-name": "Template"
            }
          },
          "x-go-name": "Spec"
        },
        "status": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Status"
        }
      },
      "x-go-name": "WorkloadGroup",
      "x-go-package": "github.com/kiali/kiali/models"
    },
    "workloadGroups": {
      "description": "This is used for returning an array of WorkloadGroup",
      "type": "array",
      "title": "WorkloadGroups workloadGroups",
      "items": {
        "$ref": "#/definitions/workloadGroup"
      },
      "x-go-name": "WorkloadGroups",
      "x-go-package": "github.com/kiali/kiali/models"
    }
  },
  "responses": {
    "appDetails": {
      "description": "Detailed information of an specific app",
      "schema": {
        "$ref": "#/definitions/App"
      }
    },
    "appHealthResponse": {
      "description": "appHealthResponse contains aggregated health from various sources, for a given app",
      "schema": {
        "$ref": "#/definitions/AppHealth"
      }
    },
    "appListResponse": {
      "description": "Listing all apps in the namespace",
      "schema": {
        "$ref": "#/definitions/AppList"
      }
    },
    "authenticationInfo": {
      "description": "Return the information necessary to handle login",
      "headers": {
        "AuthorizationEndpoint": {
          "type": "string"
        },
        "Strategy": {
          "type": "string"
        }
      }
    },
    "badRequestError": {
      "description": "BadRequestError: the client request is incorrect",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 400,
            "x-go-name": "Code",
            "example": 400
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "clustersResponse": {
      "description": "Return a list of Cluster items",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Cluster"
        }
      }
    },
    "configDump": {
      "description": "Return a dump of the configuration of a given envoy proxy",
      "schema": {
        "$ref": "#/definitions/EnvoyProxyDump"
      }
    },
    "configDumpResource": {
      "description": "Return a dump of the configuration of a given envoy proxy",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      }
    },
    "dashboardResponse": {
      "description": "Dashboard response model",
      "schema": {
        "$ref": "#/definitions/MonitoringDashboard"
      }
    },
    "errorTracesResponse": {
      "description": "Number of traces in error"
    },
    "grafanaInfoResponse": {
      "description": "Return all the descriptor data related to Grafana",
      "schema": {
        "$ref": "#/definitions/GrafanaInfo"
      }
    },
    "graphResponse": {
      "description": "HTTP status code 200 and cytoscapejs Config in data",
      "schema": {
        "$ref": "#/definitions/Config"
      }
    },
    "internalError": {
      "description": "A Internal is the error message that means something has gone wrong",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 500,
            "x-go-name": "Code",
            "example": 500
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "istioConfigDetailsResponse": {
      "description": "IstioConfig details of an specific Istio Object",
      "schema": {
        "$ref": "#/definitions/IstioConfigDetails"
      }
    },
    "istioConfigList": {
      "description": "HTTP status code 200 and IstioConfigList model in data",
      "schema": {
        "$ref": "#/definitions/IstioConfigList"
      }
    },
    "istioConfigPermissions": {
      "description": "Return caller permissions per namespace and Istio Config type",
      "schema": {
        "$ref": "#/definitions/IstioConfigPermissions"
      }
    },
    "istioStatusResponse": {
      "description": "Return a list of Istio components along its status",
      "schema": {
        "$ref": "#/definitions/IstioComponentStatus"
      }
    },
    "iter8ExperimentGetDetailResponse": {
      "description": "Return a Iter8 Experiment detail",
      "schema": {
        "$ref": "#/definitions/Iter8ExperimentDetail"
      }
    },
    "iter8ExperimentsResponse": {
      "description": "Return a list of Iter8 Experiment Items",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Iter8ExperimentItem"
        }
      }
    },
    "iter8StatusResponse": {
      "description": "Return Iter8 Info",
      "schema": {
        "$ref": "#/definitions/Iter8Info"
      }
    },
    "jaegerInfoResponse": {
      "description": "Return all the descriptor data related to Jaeger",
      "schema": {
        "$ref": "#/definitions/JaegerInfo"
      }
    },
    "meshTlsResponse": {
      "description": "Return the mTLS status of the whole Mesh",
      "schema": {
        "$ref": "#/definitions/MTLSStatus"
      }
    },
    "metricsResponse": {
      "description": "Metrics response model",
      "schema": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          }
        }
      }
    },
    "metricsStatsResponse": {
      "description": "Response of the metrics stats query",
      "schema": {
        "$ref": "#/definitions/MetricsStats"
      }
    },
    "namespaceAppHealthResponse": {
      "description": "namespaceAppHealthResponse is a map of app name x health",
      "schema": {
        "$ref": "#/definitions/NamespaceAppHealth"
      }
    },
    "namespaceList": {
      "description": "List of Namespaces",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/namespace"
        }
      }
    },
    "namespaceResponse": {
      "description": "namespaceResponse is a basic namespace",
      "schema": {
        "$ref": "#/definitions/namespace"
      }
    },
    "namespaceTlsResponse": {
      "description": "Return the mTLS status of a specific Namespace",
      "schema": {
        "$ref": "#/definitions/MTLSStatus"
      }
    },
    "namespaceValidationSummaryResponse": {
      "description": "Return the validation status of a specific Namespace",
      "schema": {
        "$ref": "#/definitions/IstioValidationSummary"
      }
    },
    "noContent": {
      "description": "NoContent: the response is empty",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 204,
            "x-go-name": "Code",
            "example": 204
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notAcceptableError": {
      "description": "A NotAcceptable is the error message that means request can't be accepted",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 404,
            "x-go-name": "Code",
            "example": 404
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notFoundError": {
      "description": "A NotFoundError is the error message that is generated when server could not find what was requested.",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 404,
            "x-go-name": "Code",
            "example": 404
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "serviceDetailsResponse": {
      "description": "Listing all the information related to a workload",
      "schema": {
        "$ref": "#/definitions/ServiceDetails"
      }
    },
    "serviceHealthResponse": {
      "description": "serviceHealthResponse contains aggregated health from various sources, for a given service",
      "schema": {
        "$ref": "#/definitions/ServiceHealth"
      }
    },
    "serviceListResponse": {
      "description": "Listing all services in the namespace",
      "schema": {
        "$ref": "#/definitions/ServiceList"
      }
    },
    "serviceUnavailableError": {
      "description": "A Internal is the error message that means something has gone wrong",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code",
            "type": "integer",
            "format": "int32",
            "default": 503,
            "x-go-name": "Code",
            "example": 503
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "spansResponse": {
      "description": "Listing all the information related to a Span",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/JaegerSpan"
        }
      }
    },
    "statusInfo": {
      "description": "HTTP status code 200 and statusInfo model in data",
      "schema": {
        "$ref": "#/definitions/StatusInfo"
      }
    },
    "tokenResponse": {
      "description": "HTTP status code 200 and tokenGenerated model in data",
      "schema": {
        "$ref": "#/definitions/TokenResponse"
      }
    },
    "traceDetailsResponse": {
      "description": "Listing all the information related to a Trace",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Trace"
        }
      }
    },
    "workloadDetails": {
      "description": "Listing all the information related to a workload",
      "schema": {
        "$ref": "#/definitions/Workload"
      }
    },
    "workloadHealthResponse": {
      "description": "workloadHealthResponse contains aggregated health from various sources, for a given workload",
      "schema": {
        "$ref": "#/definitions/WorkloadHealth"
      }
    },
    "workloadListResponse": {
      "description": "Listing all workloads in the namespace",
      "schema": {
        "$ref": "#/definitions/WorkloadList"
      }
    }
  }
}